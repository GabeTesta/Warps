using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NPlot;

namespace Warps.Controls
{
	public partial class GuideEditor : UserControl
	{
		public GuideEditor()
		{
			InitializeComponent();
			//InitializeNsPlot();
			//Comb = comb;
			InitializeGrid();
			//InitializePlotterComponents();
		}

		private void InitializeGrid()
		{
			m_dgv.Rows.Clear();
			m_dgv.Columns.Add("S", "Pos");
			m_dgv.Columns[m_dgv.Columns.Count - 1].Width = 50;
			m_dgv.Columns.Add("P", "DPI");
			m_dgv.Columns[m_dgv.Columns.Count - 1].Width = 50;

			m_dgv.RowHeadersVisible = false;
		}
	
		public string Label
		{
			get { return m_curveEditor.Label; }
			set { m_curveEditor.Label = value; }
		}

		public int Count
		{
			get { return m_curveEditor.Count; }
			set { m_curveEditor.Count = value; }
		}

		public PointTypeSwitcher this[int index]
		{
			get { return m_curveEditor[index]; }
		}

		public double Length
		{
			set { m_curveEditor.Length = value; }
		}

		public IFitPoint[] FitPoints
		{
			//get { return m_curveEditor.FitPoints; }
			set { m_curveEditor.FitPoints = value; }
		}

		#region  CombPlot

		public Vect2[] CombPnts 
		{ 
			get {
				List<Vect2> ret = new List<Vect2>();
				//m_dgv.Sort(m_dgv.Columns[0], ListSortDirection.Ascending);//sort by spos first
				for (int i = 0; i < m_dgv.Rows.Count - 1; i++)
				{
					ret.Add(new Vect2(Convert.ToDouble(m_dgv[0, i].Value), Convert.ToDouble(m_dgv[1, i].Value)));
				}

				return ret.ToArray();
			}
			set
			{
				m_dgv.Rows.Clear();
				foreach (Vect2 v in value)
					m_dgv.Rows.Add(v[0], v[1]);
				UpdatePlot();
			}
		}

		public void UpdatePlot()
		{
			m_nsPlot.Clear();
			m_nsPlot.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;

			NPlot.Grid grid = new NPlot.Grid();
			grid.VerticalGridType = NPlot.Grid.GridType.Coarse;
			grid.HorizontalGridType = NPlot.Grid.GridType.Coarse;
			grid.MinorGridPen = new Pen(Color.Blue, 1.0f);
			grid.MajorGridPen = new Pen(Color.LightGray, 1.0f);

			m_nsPlot.Add(grid);

			LinePlot stepBalance = new LinePlot();
			stepBalance.Pen = new Pen(Color.Green, 2);

			List<decimal> balanceAxis = new List<decimal>();

			List<decimal> balanceAmount = new List<decimal>();

			RBF.RBFSpline rbf = FitRBF();
			double[] p = new double[1];
			double s = 0; int CNT = 50;
			for (int i = 0; i < CNT; i++)
			{
				s = BLAS.interpolant(i, CNT);
				rbf.BsVal(s, ref p);
				balanceAxis.Add(Convert.ToDecimal(s)); 
				balanceAmount.Add(Convert.ToDecimal(p[0]));
			}	

			stepBalance.AbscissaData = balanceAxis;
			stepBalance.DataSource = balanceAmount;
			m_nsPlot.Add(stepBalance);
			m_nsPlot.ShowCoordinates = true;
			//curvePlot.AutoScaleAutoGeneratedAxes = true;

			m_nsPlot.RightMenu = NPlot.Windows.PlotSurface2D.DefaultContextMenu;
			//m_plot.AddInteraction(new NPlot.Windows.PlotSurface2D.Interactions.AxisDrag(false));

			//m_plot.AddAxesConstraint(new AxesConstraint.AxisPosition(PlotSurface2D.YAxisPosition.Left, 60));
			//m_plot.YAxis1.Label = "";
			//m_plot.YAxis1.LabelFont = new Font(this.Font, FontStyle.Bold);
			//m_plot.YAxis1.LabelOffsetAbsolute = true;
			//m_plot.XAxis1.Label = "";
			//m_plot.XAxis1.LabelFont = new Font(this.Font, FontStyle.Bold);
			//m_plot.YAxis1.LabelOffset = 30;
			m_nsPlot.XAxis1.HideTickText = false;
			m_nsPlot.Refresh();
			//m_plot.Padding = 5;

//			m_plot.TitleFont = new Font(this.Font, FontStyle.Bold);
		}

		private RBF.RBFSpline FitRBF()
		{
			List<double[]> x = new List<double[]>();
			List<double> s = new List<double>();
			for (int i = 0; i < CombPnts.Length; i++)
			{
				s.Add(CombPnts[i][0]);
				x.Add(new double[] { CombPnts[i][1]});
			}

			RBF.RBFSpline rbf = new RBF.RBFSpline();
			rbf.Fit(s, x);
			return rbf;
		}

		private void m_dgv_CellValueChanged(object sender, DataGridViewCellEventArgs e)
		{
			
		}

		private void plot_Click(object sender, EventArgs e)
		{
			UpdatePlot();
		}

		#endregion 



	}
}
