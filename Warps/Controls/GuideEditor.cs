using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NPlot;
using Warps;

namespace Warps.Controls
{
	public partial class GuideEditor : UserControl
	{
		public GuideEditor(Warps.Trackers.GuideCombTracker tracker)
		{
			InitializeComponent();
			//InitializeNsPlot();
			//Comb = comb;
			InitializeGrid();
			if (tracker != null)
			{
				m_nsPlot.MouseDown += tracker.OnDown;
				m_nsPlot.MouseMove += tracker.OnMove;
				m_nsPlot.MouseUp += tracker.OnUp;
			}
			//InitializePlotterComponents();
		}

		private void InitializeGrid()
		{
			m_dgv.Rows.Clear();
			m_dgv.Columns.Add("S", "Pos");
			m_dgv.Columns[m_dgv.Columns.Count - 1].Width = 50;
			m_dgv.Columns.Add("P", "DPI");
			m_dgv.Columns[m_dgv.Columns.Count - 1].Width = 50;

			m_dgv.RowHeadersVisible = false;
		}
	
		public string Label
		{
			get { return m_curveEditor.Label; }
			set { m_curveEditor.Label = value; }
		}

		public double Length
		{
			set { m_curveEditor.Length = value; }
		}

		#region  CombPlot

		public Vect2[] CombPnts 
		{ 
			get {
				List<Vect2> ret = new List<Vect2>();
				//m_dgv.Sort(m_dgv.Columns[0], ListSortDirection.Ascending);//sort by spos first
				for (int i = 0; i < m_dgv.Rows.Count - 1; i++)
				{
					ret.Add(new Vect2(Convert.ToDouble(m_dgv[0, i].Value), Convert.ToDouble(m_dgv[1, i].Value)));
				}

				return ret.ToArray();
			}
			set
			{
				m_dgv.Rows.Clear();
				foreach (Vect2 v in value)
					m_dgv.Rows.Add(v[0], v[1]);
				UpdatePlot();
			}
		}

		public void UpdatePlot()
		{

			m_nsPlot.Clear();
			m_nsPlot.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
			m_nsPlot.BackColor = Color.FromKnownColor(KnownColor.Control);

			NPlot.Grid grid = new NPlot.Grid();
			grid.VerticalGridType = NPlot.Grid.GridType.Coarse;
			grid.HorizontalGridType = NPlot.Grid.GridType.Coarse;

			grid.MinorGridPen = new Pen(Color.LightSlateGray, 1.0f);
			grid.MajorGridPen = new Pen(Color.SlateGray, 1.0f);
			Color LINE = Color.RoyalBlue;
			Color VERT = Color.LightSkyBlue;
			Color MARK = Color.SteelBlue;

			m_nsPlot.Add(grid);

			LinePlot combLine = new LinePlot();
			combLine.Pen = new Pen(LINE, 2);

			List<decimal> combX = new List<decimal>();
			List<decimal> combY = new List<decimal>();

			RBF.RBFSpline rbf = FitRBF();
			double[] p = new double[1];
			double s = 0; int CNT = 50;
			for (int i = 0; i < CNT; i++)
			{
				s = BLAS.interpolant(i, CNT);
				rbf.BsVal(s, ref p);
				combX.Add(Convert.ToDecimal(s)); 
				combY.Add(Convert.ToDecimal(p[0]));
			}	

			combLine.AbscissaData = combX;
			combLine.DataSource = combY;
			m_nsPlot.Add(combLine);

			combX = new List<decimal>();
			combY = new List<decimal>();
			List<double> vertsX;
			List<double> vertsY;
			foreach (Vect2 v in CombPnts)
			{
				//add comb point for marker
				combX.Add(Convert.ToDecimal(v[0]));
				combY.Add(Convert.ToDecimal(v[1]));

				//create vertical comb line 
				vertsX = new List<double>(2);
				vertsY = new List<double>(2);
				vertsX.Add(v[0]);
				vertsX.Add(v[0]);
				vertsY.Add(v[1]);
				vertsY.Add(0);
				LinePlot ver = new LinePlot(vertsY, vertsX);
				ver.Pen = new Pen(VERT, 2f);
				m_nsPlot.Add(ver);

			}

			PointPlot combPoints = new PointPlot(new Marker(Marker.MarkerType.Circle, 12));
			combPoints.AbscissaData = combX;
			combPoints.DataSource = combY;
			combPoints.Marker.Pen = new Pen(MARK, 1f);
			m_nsPlot.Add(combPoints);

			//combPoints = new PointPlot(new Marker(Marker.MarkerType.Cross1, 7));
			//combPoints.AbscissaData = combX;
			//combPoints.DataSource = combY;
			//combPoints.Marker.Pen = new Pen(MARK, 1f);
			//m_nsPlot.Add(combPoints);

			m_nsPlot.ShowCoordinates = true;
			//curvePlot.AutoScaleAutoGeneratedAxes = true;

			m_nsPlot.RightMenu = NPlot.Windows.PlotSurface2D.DefaultContextMenu;
			//m_plot.AddInteraction(new NPlot.Windows.PlotSurface2D.Interactions.AxisDrag(false));

			//m_plot.AddAxesConstraint(new AxesConstraint.AxisPosition(PlotSurface2D.YAxisPosition.Left, 60));
			//m_plot.YAxis1.Label = "";
			//m_plot.YAxis1.LabelFont = new Font(this.Font, FontStyle.Bold);
			//m_plot.YAxis1.LabelOffsetAbsolute = true;
			//m_plot.XAxis1.Label = "";
			//m_plot.XAxis1.LabelFont = new Font(this.Font, FontStyle.Bold);
			//m_plot.YAxis1.LabelOffset = 30;
			m_nsPlot.XAxis1.HideTickText = false;
			m_nsPlot.Refresh();
			//m_plot.Padding = 5;

//			m_plot.TitleFont = new Font(this.Font, FontStyle.Bold);
		}

		private RBF.RBFSpline FitRBF()
		{
			List<double[]> x = new List<double[]>();
			List<double> s = new List<double>();
			for (int i = 0; i < CombPnts.Length; i++)
			{
				s.Add(CombPnts[i][0]);
				x.Add(new double[] { CombPnts[i][1]});
			}

			RBF.RBFSpline rbf = new RBF.RBFSpline();
			rbf.Fit(s, x);
			return rbf;
		}

		#endregion 

		internal void WriteComb(GuideComb comb)
		{
			m_curveEditor.WriteCurve(comb);
			comb.FitComb(CombPnts);
			UpdatePlot();
		}

		internal void ReadComb(GuideComb comb)
		{
			m_curveEditor.ReadCurve(comb);
			CombPnts = comb.CombPnts;
		}
	}
}
